{"remainingRequest":"C:\\xampp\\htdocs\\LAB11\\node_modules\\babel-loader\\lib\\index.js!C:\\xampp\\htdocs\\LAB11\\node_modules\\eslint-loader\\index.js??ref--14-0!C:\\xampp\\htdocs\\LAB11\\src\\store\\user.js","dependencies":[{"path":"C:\\xampp\\htdocs\\LAB11\\src\\store\\user.js","mtime":1670078574796},{"path":"C:\\xampp\\htdocs\\LAB11\\babel.config.js","mtime":1669579532000},{"path":"C:\\xampp\\htdocs\\LAB11\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1669898372387},{"path":"C:\\xampp\\htdocs\\LAB11\\node_modules\\babel-loader\\lib\\index.js","mtime":1669898373313},{"path":"C:\\xampp\\htdocs\\LAB11\\node_modules\\eslint-loader\\index.js","mtime":1669898371423}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/xampp/htdocs/LAB11/src/store/user.js"],"names":["user","namespaced","state","tmp_user","getters","getUser","mutations","loginUser","logoutUser","tmpUser","actions","userExists","commit","fetch","email","method","response","json","data","console","log","alert","error","addUser","body","JSON","stringify","headers","password","session_id"],"mappings":"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","sourcesContent":["const user = {\r\n    namespaced: true,\r\n    state: {\r\n        user: { \r\n        //\"id\":\"1\",\r\n        //\"name\":\"Peter Kinget\",\r\n        //\"email\":\"peter.kinget@gmail.com\", \r\n        //\"session_id\":\"s47fcd7q4f2tm6rhdgfubn53ov\",   \r\n        },\r\n        tmp_user:{\r\n\t\t//\"email\":\"abc@yahoo.com\"\r\n\t\t//\"name\":\"abc\"\r\n\t\t//\"password\":\"123456\"\t\t\t\r\n\t\t},\r\n    },\r\n    getters: {\r\n        getUser (state) {\r\n            return state.user;\r\n        },   \r\n    }, \r\n    mutations: {\r\n        loginUser(state, user){\r\n            state.user = user\r\n        },\r\n        logoutUser(state){\r\n            state.user = {}\r\n        },\r\n        tmpUser(state, user){\r\n            state.tmp_user = user\r\n        },           \r\n    },\r\n    actions: {\r\n        async userExists({commit}, user) {\r\n\t\t\ttry {\r\n\t\t\t\tconst response = await fetch(`http://localhost/LAB11/api/users.php?email=${user.email}`, {\r\n\t\t\t\t\tmethod: 'GET',\r\n\t\t\t\t})\r\n                const data = await response.json()\r\n                console.log('userExists', data)\r\n\t\t\t\tif ( data !== null) {\r\n                    alert('Email already exists')\r\n                    return true\r\n                }\r\n                else {\r\n                    //remember temporary user\r\n                    commit('tmpUser', user)\r\n                    return false\r\n                }                   \r\n\t\t\t} \r\n\t\t\tcatch (error) {\r\n\t\t\t\tconsole.error(error)\r\n\t\t\t\talert('Error: Database connection failed in phase 1')\r\n\t\t\t\treturn false\r\n\t\t\t}\r\n\t\t}, \r\n        async addUser({state}) {\r\n\t\t\ttry {\r\n                const response = await fetch('http://localhost/LAB11/api/users.php', {\r\n\t\t\t\t\tmethod: 'POST',\r\n\t\t\t\t\tbody: JSON.stringify(state.tmp_user),\r\n\t\t\t\t\theaders: { 'Content-type': 'text/html; charset=UTF-8' },\r\n\t\t\t\t})\r\n\t\t\t\tconst data = await response.json()\r\n\t\t\t\tconsole.log('received data:', data)\r\n                return true\r\n\t\t\t} \r\n\t\t\tcatch (error) {\r\n\t\t\t\tconsole.error(error)\r\n\t\t\t\talert('Error: Database connection failed in phase 2')\t\r\n\t\t\t\treturn false\t\t\t\r\n\t\t\t}\r\n\t\t},\r\n        async loginUser({commit}, user) {\r\n\t\t\ttry {\r\n\t\t\t\tconst response = await fetch(`http://localhost/LAB11/api/users.php?email=${user.email}&password=${user.password}`)\r\n\t\t\t\tconst data = await response.json()\r\n\t\t\t\tif ( data == null) {\r\n\t\t\t\t\talert('Error: Wrong credentials')\r\n\t\t\t\t\treturn false\r\n                }\r\n                else {\r\n\t\t\t\t\t//add new user\r\n\t\t\t\t\tconsole.log('received data:', data)\r\n\t\t\t\t\tcommit('loginUser', data)\r\n                    return true\r\n                }\r\n\r\n\t\t\t} \r\n\t\t\tcatch (error) {\r\n\t\t\t\tconsole.error(error)\r\n\t\t\t\talert('Error: Database connection failed')\t\r\n\t\t\t\treturn false\t\t\t\r\n\t\t\t}\r\n\t\t}, \r\n        async logoutUser({commit},session_id) {\r\n\t\t\ttry {\r\n\t\t\t\tconst response = await fetch(`http://localhost/LAB11/api/users.php?session_id=${session_id}`)\r\n\t\t\t\tconst data = await response.json()\r\n                console.log('received data:',data)\r\n                commit('logoutUser')\r\n\t\t\t\treturn true\r\n\t\t\t} \r\n\t\t\tcatch (error) {\r\n\t\t\t\tconsole.error(error)\r\n\t\t\t\treturn false\r\n\t\t\t}\r\n\t\t},   \r\n    }\r\n\r\n}\r\nexport default \r\n\tuser"]}]}